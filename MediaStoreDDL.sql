create table produkt
(
    produkt_id       bigint generated by default as identity primary key,
    asin     varchar(255) unique NOT NULL,
    titel varchar(1000) NOT NULL,
    rating   double precision,
    bild     varchar(1000),
    verkaufsrang integer,
    typ     varchar(255)
);

CREATE INDEX "Asin"
    ON public.produkt USING btree
    (asin ASC NULLS LAST)
;

create table buch
(
    produkt_id     bigint  not null primary key references produkt ON DELETE CASCADE,
    seitenzahl int not null CHECK(seitenzahl >= -1),
    binding         varchar(255),
    erscheinungsdatum date,
    isbn            varchar(255)
);

create table cd
(
    produkt_id      bigint  not null primary key references produkt ON DELETE CASCADE,
    binding varchar (255),
    erscheinungsdatum date
);

create table dvd
(
    produkt_id            bigint   not null primary key references produkt ON DELETE CASCADE,
    format        varchar(255),
    regionencode    integer not null check (regionencode BETWEEN -1 AND 8),
    laufzeit       integer CHECK (dvd.laufzeit IS NULL OR laufzeit > -1)

);

create table filiale
(
    filial_id     bigint generated by default as identity primary key,
    name   varchar(255) unique NOT NULL,
    strasse varchar(255) NOT NULL,
    plz    varchar(255) NOT NULL
);
create table kategorie
(
    kategorie_id   bigint generated by default as identity  primary key,
    bezeichnung varchar(255) NOT NULL,
    ueberkategorie_id bigint references  kategorie 
);
create table produkt_kategorie
(
    kategorie_id bigint not null references kategorie ON DELETE CASCADE,
    produkt_id     bigint not null references produkt ON DELETE CASCADE,
    primary key (kategorie_id, produkt_id)
);
create table buch_autor
(
     produkt_id bigint not null references buch ON DELETE CASCADE,
     autor varchar(255) not null,
     primary key (produkt_id,autor)
);
create table buch_verlag
(
    produkt_id bigint not null references buch ON DELETE CASCADE,
    verlag varchar(255) NOT NULL
);
create table cd_artist
(
    produkt_id bigint not null references cd ON DELETE CASCADE,
    artist   varchar(255) NOT NULL,
    primary key (produkt_id,artist)
);
create table cd_label
(
    produkt_id bigint not null references cd ON DELETE CASCADE,
    label varchar(255) NOT NULL,
    primary key(produkt_id,label)
);
create table cd_titel
(
    produkt_id bigint not null references cd ON DELETE CASCADE,
    titel varchar(255) NOT NULL,
    primary key (produkt_id,titel)
);
create table dvd_actor
(
    produkt_id bigint not null references dvd ON DELETE CASCADE,
    actor varchar(255) not null,
    primary key (produkt_id,actor)
);
create table dvd_creator
(
    produkt_id   bigint not null references dvd ON DELETE CASCADE,
    creator varchar(255) not null,
    primary key (produkt_id,creator)
);
create table dvd_director
(
    produkt_id bigint not null references dvd ON DELETE CASCADE,
    director varchar(255) not null,
    primary key(produkt_id,director)
);
create table review
(
    review_id bigint generated by default as identity primary key,
    rating     integer not null CHECK (rating BETWEEN 1 AND 5),
    helpful    integer not null CHECK (helpful >= 0),
    reviewDate date,
    benutzer varchar(255),
    summary varchar(255),
    comment text,
    produkt_id bigint NOT NULL references produkt ON DELETE CASCADE
);
create table kondition
(
    konditions_id bigint generated by default as identity primary key,
    preis double precision NOT NULL CHECK (preis >=0),
    zustand varchar(255),
    waehrung varchar(255),

    produkt_id bigint NOT NULL references produkt ON DELETE CASCADE,
    filial_id bigint NOT NULL references filiale ON DELETE CASCADE
);

create table sindÄhnlich
(
    produkt_id1     bigint not null references produkt ON DELETE CASCADE,
    produkt_id2 bigint not null references produkt ON DELETE CASCADE,
    primary key (produkt_id1, produkt_id2)
);

create table kauf
(
    kauf_id bigint generated by default as identity primary key,
    plz varchar(255) not null,
    straße_nr varchar(255) not null,
    stadt varchar(255) not null,
    kontonummer varchar(255) not null
);

create table kauf_waren
(
    kauf_id bigint not null references kauf ON DELETE CASCADE,
    produkt_id bigint not null references produkt ON DELETE CASCADE,
    anzahl integer not null
);

CREATE OR REPLACE FUNCTION update_rating()
RETURNS TRIGGER AS $$
BEGIN
UPDATE produkt
SET rating =
        (SELECT AVG(rating) FROM review GROUP BY produkt_id Having review.produkt_id = new.produkt_id)
WHERE produkt_id = new.produkt_id;
RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER update_rating
    AFTER INSERT ON review
    FOR EACH ROW
    EXECUTE PROCEDURE update_rating();




























	
		

